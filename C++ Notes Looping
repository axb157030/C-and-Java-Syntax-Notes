

To increment a value means to increase it by 1 and to decrement a value means to decrease it by 1. They work on variables. 
The operand of these operators must be an lvalue. When they are used  they increment or decrement its operand even when its operand is being assigned to another variable, even when it is used in a function or another object. The more it is used the more operator affects operand. Its operand keeps incrementing or decrementing based on how many times it's read;

cout << x++ // value = 1
cout << x++  // value = 2
cout << x++ // value =3

int x;

int y;
             // Play with this // Value displayed is 32. can change 

X=2;       // diff fixed mode can change it

y= x++;

cout << x << y << endl;

y = ++x;


Postfix mode: the operator is placed after the variable:  EX: num++ .

Prefix mode: operator placed before the variable  EX: ++num


// This program demonstrates the ++ and -- operators.
#include <iostream>
using namespace std;
int main()
{
   int num = 4;   // num starts out with 4.
   
   // Display the value in num.
   cout << "The variable num is " << num << endl;
   cout << "I will now increment num.\n\n";
   
   // Use postfix ++ to increment num.
   num++;
   cout << "Now the variable num is " << num << endl;
   cout << "I will increment num again.\n\n";
// Use prefix ++ to increment num.
   ++num;
   cout << "Now the variable num is " << num << endl;
   cout << "I will now decrement num.\n\n";
   
   // Use postfix -- to decrement num.
   num--;
   cout << "Now the variable num is " << num << endl;
   cout << "I will decrement num again.\n\n";
   
   // Use prefix -- to increment num.
   --num;
   cout << "Now the variable num is " << num << endl;
   return 0;
The fixed mode the operator is used in does matter when your using objects  and functions like cout  and if() on them.
https://www.thenewboston.com/videos.php?cat=16&video=17497

 int num = 4; 
cout << num++ << endl; //  increment doesn't happen yet. Value displayed is 4
	<< num  << endl; // increment does happen. Value displayed is 5
	
	/* if used the ++ operators in prefix mode in prefix mode increment will happen when its operand is first displayed*/
	
	 int num = 4; 
	cout << ++num<< endl; //  Value displayed is 4
		<< num  << endl; // increment already happened. Value displayed is 5
		
		x= 99
		If( x++ < 100)
			cout << "It is true!\n; // Display It is true
		
		
		
	Unlike prefix mode, the postfix mode causes the increment to happen after the value of the variable is used in the expression.

						A loop is part of a program that repeats
						
A loop is a control structure that causes a statement or group of statements to repeat. Loops that never end are called infinite loops.
https://www.thenewboston.com/videos.php?cat=16&video=17494

while(condition) 
{
   statement(s);
}

The condition is a Boolean expression. It evaluates to be to be true or false. The header of the example is the loop header . 
It consists of the key word while followed by a relational expression enclosed in (). If the condition is true, the statement executes until the condition is false.
The statement that is repeated is known as the body of the loop. Like the if statement, w/o the statements following it.  
Don't forget the braces. like if statement don't forget them. 


Each repition of a loop is known as an iteration. Loops sometimes should have prime readings/prompts a top of them and an input validation in them which tells user their invalid entry and what values they should input to make the program work.


The while loop is known as a pretest loop; it tests its expression before each iteration
The loop will never iterate if the test expression is false to start with in a while loop

https://www.thenewboston.com/videos.php?cat=16&video=17495

Find a loop control variable in the above video


	A counter is a variable that is regularly incremented or decremented each time a loop iterates
	
	int num = 0; // num is the counter
	while (num++ < 10)
		cout  << num << "\t\t" <<  ( num * num) << endl;
		
	Is a loop control variable a counter variable?
	
	The do-while loop is a posttest loop, which means its expression is tested after each iteration
			https://www.thenewboston.com/videos.php?cat=16&video=17500
do {
Statement/s;
} while ( condition );





The do-while loop is a posttest loop. It doesn't test its expression until it has completed an iteration. This loop always performs at least 1 iteration, even if the condition is false. The statements are executed first. If the conditional expression in the parameters of the function is true then they'll keep being executed until the conditional expression is false. This is the difference between a do-while loop and a while loop.

int count = 10;

/* counter: a variable that is incremented or decremented each time a loop repeats*/

do
	cout << "Hello World\n";
	while(count++ < 1); // program output Hello World
	
Int v = 0;
do
	cout << v++; // value = 01234
	while (v < 5);
			
			
			The for loop is ideal for performing a known number of iterations
			



for ( init; condition; increment ) /* this is a pretest loop. test expression evaluated before loop iterates*/
{
   statement(s);
}

The 1st line of the for loop is the loop header. The 1st expression is the initialization expression. The 2nd expression is the test expression. Third is the update expression
https://www.thenewboston.com/videos.php?cat=16&video=17498

Ex: 

for (count = 1; count <= 5; count++)
cout << "Hello" << endl; // since it only has 1 statement braces are not needed


You can also define variables in a for loop instead of just initializing them. When a variable is defined in the initialization expression of a for loop, the scope of the variable is limited to that of the loop. Is this true for all functions? Whenever, a variable is defined inside parameters is the scope of the variable limited to that of the f(x)?

You can intitiionalize or define multiple variables in 1 for loop. 

int x, y;
for (x = 1, y = 1; x <= 5; x++)// Notice where the ; are placed
{
cout << x << y; // Don't separate multiple test expressions this way. Use // logical operators to separate them instead of commas           

No need to initialize variable in for-loop if the specific variable is already defined and initialized.

Recommended to modify variables in the update expression in the for loop instead of the body

for (x=1;x<=10; x++)// update expression no longer needed since its already in the function just elsewhere and not its parameters

{

cout << a << endl;

x++; // increment twice for each iteration.

}
 Unless programmer specifically wants x to increment twice, update expression can be omitted 
for reasons stated in comments of above program.

You can even omit the test expression. If that's done the loopp will keep executing. It won't stop

for( ; ; )
	cout << "Hello World\n"; // The string is displayed forever until something interrupts the program, or until program stops running.
	
				A running total is a sum of numbers that accumulates with each iteration of a loop.
				 The variable used to keep the running total is called an accumulator

Set the accumulator to 0

// This program takes daily sales figures over a period of time
// and calculates their total.
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
   int days;            // Number of days
   double total = 0.0;  // Accumulator, initialized with 0
// Get the number of days.
   cout << "For how many days do you have sales figures? ";
   cin >> days;
   
   // Get the sales for each day and accumulate a total.
   for (int count = 1; count <= days; count++)
   {
      double sales;
      cout << "Enter the sales for day " << count << ": ";
      cin >> sales;
      total += sales;   // Accumulate the running total.
   }
   
   // Display the total sales.
   cout << fixed << showpoint << setprecision(2);
   cout << "The total sales are $" << total << endl;
   return 0;
}


		A sentinel is a special value that marks the end of a list of values
		https://www.thenewboston.com/videos.php?cat=16&video=17496  
		
		
		// This program calculates the total number of points a 
// soccer team has earned over a series of games. The user
// enters a series of point values, then -1 when finished.
#include <iostream>
using namespace std;
		int main()
{
   int game = 1,   // Game counter
       points,     // To hold a number of points
       total = 0;  // Accumulator
		cout << "Enter the number of points your team has earned\n";
   cout << "so far in the season, then enter -1 when finished.\n\n";
   
		   // -1 is the sentinel in this program
		
		   cout << "Enter the points for game " << game << ": ";
   cin >> points;
		while (points != -1)// They used a while loop to help make the sentinel
   {  
      total += points;
      game++;
      cout << "Enter the points for game " << game << ": ";
      cin >> points;
   }
   cout << "\n The total points are " << total << endl;
   return 0;
}
		
		When reading a value from a file with the stream extraction operator, the operator returns a true or false value indicating whether the value was successfully read. This return value can be used to detect when the end of a file has been reached????????????????

int number, total = 0;
for (int count = 0; count < 7; count++) // Programmer find the accumulator
{
cout << "Enter a number: ";
cin >> number;
total += number;
}



		Although most repetitive algorithms can be written with any of the 3 types of loops, each works best in different situation
		
The while loop is a conditional loop. It repeats as long as a particular condition exists. It's also a pretest loop. It's ideal where you don't want the loop to iterate if the condition is false from the beginning. It's good for validating inputs. Sentinel values are good application of the while loop. Look at the only program with a sentinel in these notes. It was done with a while loop.

The do-while loop is like the while loop. It's conditional. It's ideal in situations where you always want the loop to iterate at least once. It's a good choice for repeating a menu.

The for loop is a pretest loop unlike the do-while loop. It's ideal in situations where the exact # of iterations is known


Switch and loop f(x)s can work really well together

				A loop that is inside another loop is called a nested loop
				
The fill f(x) fill sequence with values http://www.cplusplus.com/reference/algorithm/fill/

	
	while(condition)
{
   while(condition)
   {
      statement(s);
   }
   statement(s); // you can put more statements.
}
	
	From <http://www.tutorialspoint.com/cplusplus/cpp_nested_loops.htm> 
	
	• An inner loop goes through all of its iterations for each iteration of an outer loop?
	• Inner loops complete their iterations faster than outer loops?
	• To get the total number of iterations of a nested loop, multiply the number of iterations of all loops
	• http://www.c4learn.com/cplusplus/cpp-nested-loops/
	
	
	The break statement causes a loop to terminate early . It can only be used on switches or loop functions.
	
	Even if a loop is programed initially to execute a certain amount of times, a break can make it executed less than that.
	
	int count = 0;
	while (count++ < 10)
	{
		cout << count << endl;
		if (count == 5)
		break; // b/c if statement the loop will only execute 5 times
	}
	
		The continue statement causes a loop to stop its current iteration & begin the next 1
		
		int testVal = 0;
		while (testVal++ < 10)
		{
			If (testVal == 4)
				continue;
			cout << testValue << "  Hey!";
		}
		
		Why do people use this continue f(x)? Why do people use the break f(x) in loops
						
						Files what is needed?
		
		
		The last statement in a loop a CPU reads when reading a loop are the statements executed when the loop just becomes false. When relational expression of function is false only the function stops executing or not work. Everything else works. The loop f(x)s make loops not the increment/decrement operator. These in/decremental operators do what they are they are called, increment. They don't loop
		
		
		
		
		
		   // Basic 10-element integer array.
    int x[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
		// Range-based for loop to iterate through the array.
    for( int y : x ) { // Access by value using a copy declared as a specific type. 
                       // Not preferred.
        cout << y << " ";
    }
    cout << endl;
		
		From <https://msdn.microsoft.com/en-us/library/jj203382.aspx> 
		
		Output:
		1 2 3 4 5 6 7 8 9 10
		
		
		
		A file’s read position marks the location of the next byte that will be read from 
		the file. When an input file is opened, its read position is initially set to the first 
		byte in the file. 
		
		From <http://media.pearsoncmg.com/aw/ecs_gaddis_sowcpp_cs_8/app_cs/Z13_GADD9395_08_SE_APP13.pdf> 
		
		
		

		
		
		File buffer: a small "holding section" of memory the file bound data is written into. Data is temporarily stored there. Operating systems automatically store data in a file buffer. Closing a file may cause any unsaved data in file buffer to be saved in the file.
		
